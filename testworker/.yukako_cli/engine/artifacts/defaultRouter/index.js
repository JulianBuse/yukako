var u=console.log,d=console.error,c=t=>{console.log=(...e)=>{let r={id:t.id,type:t.type,name:t.name},n=JSON.stringify(r);u(`__START_YUKAKO_LOG_HEADER__${n}__END_YUKAKO_LOG_HEADER__`,...e)},console.error=(...e)=>{let r={id:t.id,type:t.type,name:t.name},n=JSON.stringify(r);d(`__START_YUKAKO_LOG_HEADER__${n}__END_YUKAKO_LOG_HEADER__`,...e)}};var p={fetch:async(t,e)=>{c({id:e.__meta.id,type:"router",name:"yukako-router"});let r=t.headers.get("x-forwarded-host")||t.headers.get("host")||"",n=new URL(t.url);if(console.log(`[router] ${t.method} ${n.pathname}${n.search} ${r}`),!r)return new Response("No x-forwarded-host header",{status:400});let i=Object.values(e.__meta.routes).filter(s=>s.host===r||s.host==="*");if(i.length===0)return new Response("No service matching host",{status:404});let a=i.filter(s=>{if(!s.paths||s.paths.length===0)return!0;let h=new URL(t.url);for(let _ of s.paths)if(h.pathname.startsWith(_))return!0});if(a.length===0)return new Response("No service matching path",{status:404});let g=a[0],o=e[g.service];return!o||!o.fetch?new Response("No service found",{status:404}):o.fetch(t)}};export{p as default};
